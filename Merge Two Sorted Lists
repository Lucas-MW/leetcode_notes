Time complexity : O(n + m)

Because exactly one of l1 and l2 is incremented on each loop iteration, the while loop runs for a number of iterations equal to the sum of the lengths of the two lists. 

Space complexity : O(1)

The iterative approach only allocates a few pointers, so it has a constant overall memory footprint.

if list1 == None and list2 == None:
            return list1
        elif list1 == None:
            return list2
        elif list2 == None:
            return list1
        
        head = ListNode()
        print(head)
        temp = head
        #while list1 != None and list2 != None:
        while list1 and list2:
            if list1.val <= list2.val:
                temp.next = list1
                list1 = list1.next
            else:
                temp.next = list2
                list2 = list2.next
            temp = temp.next
        if list1 == None: 
            temp.next = list2
        else:
            temp.next = list1
        return head.next
