
Time complexity : O(N), where N is a number of nodes in the tree, since one visits each node exactly once.

Space complexity : O(log(N)) in the best case of completely balanced tree andO(N) in the worst case of completely unbalanced tree, to keep a recursion stack.

recursion:
if both None return true
one of them none return false
if both val is not same
return false
return self.isSame(pleft,qleft) and self.isSmae(pright,qright)

iteration:

#DFS
        stack = [(p, q)]
        print(stack)
        while stack:
            t1, t2 = stack.pop()
            if t1 == None and t2 == None: 
                continue
            if t1 == None or t2 == None: 
                return False
            if t1.val != t2.val: 
                return False
            stack.append((t1.left, t2.left))
            stack.append((t1.right, t2.right))           
        return True
